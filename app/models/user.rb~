require 'bcrypt'

class User < ActiveRecord::Base
	validates_presence_of :first_name, :last_name, :email, :bday
	has_many :votes, :through => :issues
	has_many :created_issues, :foreign_key => "user_id", :class_name => "Issue"

	attr_accessor :password

	attr_accessible :first_name, :last_name, :email, :bday, :location, :password, :password_confirmation

	EMAIL_REGEX = /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}$/i

        validates :first_name, :last_name, :email, :bday, :location, :presence => true

        validates :email, :uniqueness => true, :format => EMAIL_REGEX

        validates_datetime :bday

        validates_datetime :last_login, allow_nil: true

        validates_length_of :password, :in => 6..20, :on => :create

        validates :password, :confirmation => true

		
	def password_changed?
		!@new_password.blank?
	end

	private

	def hash_new_password
		self.password = BCrypt::Password.create(@new_password)
	end

	def self.authenticate(email, password)

		if user = User.find_by_email(email)

			if BCrypt::Password.new(user.password).is_password? password

				return user
			end
		end
		
      return nil
  	end
end
